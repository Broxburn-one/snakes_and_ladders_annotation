{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Player_spec.rb\
\

\b\fs28 def
\b0\fs24  
\b\fs28 player_cannot_move_past_maximum
\b0\fs24 \
\
\
pass number of spaces to move and \
if when you add it the resulting position is greater than the max_movement allowed (passed as a parameter), then set the position to the last square (max movement =  8 here, passed as a parameter on instantiation), otherwise go ahead and add it to create new position which is before last square.\
\
\

\b\fs28 game_spec.rb
\b0\fs24 \
\

\b def winner starts as nil
\b0 \
	if player position is the winning tile, then assigned player name to winner variable\
\
\

\b def test_game_is_won
\b0 \
	this test checks if there is a player in a  winning position (as above).\
	after the above assignment of winner if there is one, it then tests if there IS one and returns false 	if winner is nil !\
\

\b def no next turn on win
\b0 \
	tests if you are in square 8 (winning square), if you try to take a turn it flags true if that game is won.\
\

\b def adds turn to log
\b0 \
	log is an array holding turn information. if game is won it doesn\'92t add anything else.\
	otherwise it adds a turn log instance to the log.\
\
\

\b\fs28 turn_log.rb
\b0\fs24 \
\
	class is initialised with the player name, the roll and the modifier.\
	roll is dice roll; modifier says whether it\'92s a ladder (2) a snake (-7) or neither (0)\
	and returns either :ladder, :snake or :space symbols .\
\

\b\fs28 Dice.rb
\b0\fs24 \
\
	this class sets rolls as an array of 1-4 inclusive.  The roll method gives a sample rom this set.\
		\
\

\b\fs28 viewer.rb
\b0\fs24 \
\
	this class outputs the log into formatted text, giving a roll by roll play and ending with stating the 	wiener.\
\
\

\b\fs28 game_play_spec.rb
\b0\fs24 \
\
	This test tries out a short sample scenario with 4 turns, 2 each for each player and checks that the players arrive at the correct square.\
\
	First scenario is a simple win by player1\
\
	2nd scenario has one player land on  a snake and drop to the correct position while the other one wins\
	\
	3rd scenario has one player land on a ladder and eventually win.\
\
\
\
\
\
\
\
\
\
\
\
}